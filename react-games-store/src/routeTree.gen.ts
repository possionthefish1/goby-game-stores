/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutAImport } from './routes/_layout.a'
import { Route as AdminUsersUserIdImport } from './routes/admin/users/$userId'

// Create Virtual Routes

const WalletLazyImport = createFileRoute('/wallet')()
const SettingsLazyImport = createFileRoute('/settings')()
const SaleLazyImport = createFileRoute('/sale')()
const LibraryLazyImport = createFileRoute('/library')()
const IndexLazyImport = createFileRoute('/')()
const GenreIndexLazyImport = createFileRoute('/genre/')()
const UserUserIdLazyImport = createFileRoute('/user/$userId')()
const AdminUsersIndexLazyImport = createFileRoute('/admin/users/')()

// Create/Update Routes

const WalletLazyRoute = WalletLazyImport.update({
  id: '/wallet',
  path: '/wallet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/wallet.lazy').then((d) => d.Route))

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const SaleLazyRoute = SaleLazyImport.update({
  id: '/sale',
  path: '/sale',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sale.lazy').then((d) => d.Route))

const LibraryLazyRoute = LibraryLazyImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/library.lazy').then((d) => d.Route))

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const GenreIndexLazyRoute = GenreIndexLazyImport.update({
  id: '/genre/',
  path: '/genre/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/genre/index.lazy').then((d) => d.Route))

const UserUserIdLazyRoute = UserUserIdLazyImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user/$userId.lazy').then((d) => d.Route))

const LayoutARoute = LayoutAImport.update({
  id: '/a',
  path: '/a',
  getParentRoute: () => LayoutRoute,
} as any)

const AdminUsersIndexLazyRoute = AdminUsersIndexLazyImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/users/index.lazy').then((d) => d.Route),
)

const AdminUsersUserIdRoute = AdminUsersUserIdImport.update({
  id: '/admin/users/$userId',
  path: '/admin/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryLazyImport
      parentRoute: typeof rootRoute
    }
    '/sale': {
      id: '/sale'
      path: '/sale'
      fullPath: '/sale'
      preLoaderRoute: typeof SaleLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/wallet': {
      id: '/wallet'
      path: '/wallet'
      fullPath: '/wallet'
      preLoaderRoute: typeof WalletLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/a': {
      id: '/_layout/a'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof LayoutAImport
      parentRoute: typeof LayoutImport
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/genre/': {
      id: '/genre/'
      path: '/genre'
      fullPath: '/genre'
      preLoaderRoute: typeof GenreIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/$userId': {
      id: '/admin/users/$userId'
      path: '/admin/users/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AdminUsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutARoute: typeof LayoutARoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutARoute: LayoutARoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof LayoutRouteWithChildren
  '/library': typeof LibraryLazyRoute
  '/sale': typeof SaleLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/wallet': typeof WalletLazyRoute
  '/a': typeof LayoutARoute
  '/user/$userId': typeof UserUserIdLazyRoute
  '/genre': typeof GenreIndexLazyRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users': typeof AdminUsersIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof LayoutRouteWithChildren
  '/library': typeof LibraryLazyRoute
  '/sale': typeof SaleLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/wallet': typeof WalletLazyRoute
  '/a': typeof LayoutARoute
  '/user/$userId': typeof UserUserIdLazyRoute
  '/genre': typeof GenreIndexLazyRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users': typeof AdminUsersIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/library': typeof LibraryLazyRoute
  '/sale': typeof SaleLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/wallet': typeof WalletLazyRoute
  '/_layout/a': typeof LayoutARoute
  '/user/$userId': typeof UserUserIdLazyRoute
  '/genre/': typeof GenreIndexLazyRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/': typeof AdminUsersIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/library'
    | '/sale'
    | '/settings'
    | '/wallet'
    | '/a'
    | '/user/$userId'
    | '/genre'
    | '/admin/users/$userId'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/library'
    | '/sale'
    | '/settings'
    | '/wallet'
    | '/a'
    | '/user/$userId'
    | '/genre'
    | '/admin/users/$userId'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/library'
    | '/sale'
    | '/settings'
    | '/wallet'
    | '/_layout/a'
    | '/user/$userId'
    | '/genre/'
    | '/admin/users/$userId'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  LibraryLazyRoute: typeof LibraryLazyRoute
  SaleLazyRoute: typeof SaleLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  WalletLazyRoute: typeof WalletLazyRoute
  UserUserIdLazyRoute: typeof UserUserIdLazyRoute
  GenreIndexLazyRoute: typeof GenreIndexLazyRoute
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute
  AdminUsersIndexLazyRoute: typeof AdminUsersIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LayoutRoute: LayoutRouteWithChildren,
  LibraryLazyRoute: LibraryLazyRoute,
  SaleLazyRoute: SaleLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  WalletLazyRoute: WalletLazyRoute,
  UserUserIdLazyRoute: UserUserIdLazyRoute,
  GenreIndexLazyRoute: GenreIndexLazyRoute,
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
  AdminUsersIndexLazyRoute: AdminUsersIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/library",
        "/sale",
        "/settings",
        "/wallet",
        "/user/$userId",
        "/genre/",
        "/admin/users/$userId",
        "/admin/users/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/a"
      ]
    },
    "/library": {
      "filePath": "library.lazy.tsx"
    },
    "/sale": {
      "filePath": "sale.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/wallet": {
      "filePath": "wallet.lazy.tsx"
    },
    "/_layout/a": {
      "filePath": "_layout.a.tsx",
      "parent": "/_layout"
    },
    "/user/$userId": {
      "filePath": "user/$userId.lazy.tsx"
    },
    "/genre/": {
      "filePath": "genre/index.lazy.tsx"
    },
    "/admin/users/$userId": {
      "filePath": "admin/users/$userId.tsx"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
